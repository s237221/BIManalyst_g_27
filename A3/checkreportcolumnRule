import ifcopenshell
from ifcopenshell.util import element

def checkRule(model):
    # Dimension requirements for columns on specific floors from the client report
    dimension_requirements = {
        (10, 16): (360, 360),  # Floors 10 to 16 require 360x360
        (6, 9): (420, 420),    # Floors 6 to 9 require 420x420
        (3, 5): (480, 480),    # Floors 3 to 5 require 480x480
        (-2, 2): (600, 600),   # Floors -2 to 2 require 600x600
    }

    # Retrieve all columns from the model
    columns = model.by_type("IfcColumn")
    print(f"Found {len(columns)} columns in the model.")  # Debug: Print number of columns

    all_columns_match = True  # Flag to track if all columns meet requirements
    non_matching_columns = []  # List to store GlobalIDs of non-matching columns

    # Loop through each column in the model
    for column in columns:
        # Retrieve the property sets (psets) of the column
        column_properties = element.get_psets(column, psets_only=True)

        # Initialize variables for Depth, Width, and floor level
        depth = None
        width = None
        floor_level = None

        # Debug: Print column GlobalID
        global_id = column.GlobalId
        print(f"Checking column with GlobalID: {global_id}")

        # Loop through property sets to extract Depth and Width
        for pset_name, pset_props in column_properties.items():
            if 'Depth' in pset_props:
                depth = float(pset_props['Depth'])
            if 'Width' in pset_props:
                width = float(pset_props['Width'])

        # Retrieve the floor level (elevation) for the column
        for rel in column.ContainedInStructure:
            if rel.is_a("IfcRelContainedInSpatialStructure"):
                storey = rel.RelatingStructure
                if storey.is_a("IfcBuildingStorey"):
                    floor_level = storey.Elevation  # Numeric elevation level

        # Check if depth, width, and floor level are available
        if floor_level is not None and depth is not None and width is not None:
            print(f"Column {global_id} found on floor level: {floor_level}, Depth: {depth}, Width: {width}")
            # Determine if the floor level is within any of the specified ranges
            for (floor_min, floor_max), (req_depth, req_width) in dimension_requirements.items():
                if floor_min <= floor_level <= floor_max:
                    # Check if the column dimensions match the requirements
                    if depth == req_depth and width == req_width:
                        continue  # This column meets the requirement
                    else:
                        all_columns_match = False  # Set flag to False
                        non_matching_columns.append(global_id)  # Store GlobalID of the non-matching column
                        print(f"The column with GlobalID {global_id} does NOT match the requirements. "
                              f"Expected: {req_depth}x{req_width}, Found: {depth}x{width}")
                    break  # Exit loop after checking the relevant range
        else:
            all_columns_match = False  # Set flag to False
            non_matching_columns.append(global_id)  # Store GlobalID for missing information
            print(f"The column with GlobalID {global_id} has missing depth, width, or level information.")

    # Final output message
    if all_columns_match:
        print("All columns match the requirements.")
    else:
        print("Some columns do not match the requirements.")
        print("GlobalIDs of non-matching columns:", non_matching_columns)
